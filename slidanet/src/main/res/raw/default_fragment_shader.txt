//#extension GL_OES_EGL_image_external : require
precision mediump float;
uniform int video_running;
uniform float texture_width;
uniform float texture_height;
uniform int pix_active;
uniform int peek_active;
uniform float pixel_width;
uniform float pixel_height;
uniform float box_x_begin;
uniform float box_y_begin;
uniform float box_x_end;
uniform float box_y_end;
uniform float peek_it_mask_r_value;
uniform float peek_it_mask_g_value;
uniform float peek_it_mask_b_value;
uniform float peek_it_mask_a_value;
uniform float alpha;
uniform mediump mat4 texture_transform;
uniform sampler2D s_texture;
//uniform samplerExternalOES external_texture;
varying vec2 v_texcoord;

void main() {

   float T = 1.0;
   vec3 base_color = vec3(1.0, 1.0, 1.0);

   if (video_running>0) {

      vec4 transformed_texcoord = texture_transform * vec4(v_texcoord.s, v_texcoord.t, 1.0, 0.0);
      vec2 n_texcoord = vec2(transformed_texcoord.s, transformed_texcoord.t);
      //base_color = texture2D(external_texture, n_texcoord).rbg;

   } else {

      base_color = texture2D(s_texture, v_texcoord).rgb;
   }

   vec4 pixel_color = vec4(base_color, alpha);

   if (pix_active>0) {

      vec2 uv = v_texcoord.xy;

      if ( uv.x>box_x_begin && uv.x<box_x_end && uv.y>box_y_begin && uv.y<box_y_end ) {

         float dx = pixel_width * (1.0 / texture_width);
         float dy = pixel_height * (1.0 / texture_height);
         vec2 coord = vec2(dx*floor(uv.x/dx), dy*floor(uv.y/dy));

         if (video_running > 0) {

            vec4 transformed_texcoord = texture_transform * vec4(coord.s, coord.t, 1.0, 0.0);
            vec2 n_texcoord = vec2(transformed_texcoord.s, transformed_texcoord.t);
            //base_color = texture2D(external_texture, n_texcoord).rbg;

         } else {

            base_color = texture2D(s_texture, coord).rgb;

         }
      }

      vec3 neg = base_color;
      pixel_color = vec4(mix(base_color, neg, T), alpha);

   }

   if (peek_active>0) {

      vec2 uv = v_texcoord.xy;

      if (uv.x>box_x_begin && uv.x<box_x_end && uv.y>box_y_begin && uv.y<box_y_end)  {

         pixel_color = vec4(base_color, alpha);

      } else {

         pixel_color = mix(vec4(base_color, 1.0), vec4(peek_it_mask_r_value, peek_it_mask_g_value, peek_it_mask_b_value, peek_it_mask_a_value), peek_it_mask_a_value);

      }
   }

   gl_FragColor = pixel_color;
}
